.$difference
impact1b <-
cleaned_data %>%
filter(campaign_name == 'Campaign 1',
day <= as.Date('2016-04-30')) %>%
group_by(day, banner, placement, user_engagement) %>%
summarise(clicks = sum(clicks),
cpc = ifelse(sum(clicks)==0, 0, sum(cost) / sum(clicks)),
rpc = 0.18,
mpc = rpc - cpc,
margin_estimate = mpc * clicks) %>%
ungroup() %>%
summarise(margin_estimate = sum(margin_estimate)) %>%
mutate(difference = margin_estimate - impact1_base) %>%
.$difference
impact2 <-
cleaned_data %>%
filter(campaign_name == 'Campaign 1',
day >= as.Date('2016-06-01'),
user_engagement == 'High',
placement == 'mno') %>%
summarise(difference = sum(criteo_gross_profit)) %>%
.$difference
#Looking at Campaign 1 mno, I would recommend halting High User Engagement
cleaned_data %>%
filter(campaign_name == 'Campaign 1',
placement == 'mno') %>%
stacked_barplot('criteo_gross_profit',
'user_engagement',
'banner',
'User Engagement',
'Criteo Gross Profit',
'Criteo Gross Profit on Campaign 1, placement mno')
impact3 <-
cleaned_data %>%
filter(campaign_name == 'Campaign 2',
day <= as.Date('2016-04-30')) %>%
summarise(difference = sum(criteo_gross_profit)) %>%
.$difference
cleaned_data %>%
filter(campaign_name == 'Campaign 2') %>%
stacked_barplot('post_click_conversions',
'user_engagement',
'placement',
'User Engagement',
'Criteo Gross Profit',
'Criteo Gross Profit on Campaign 2')
cleaned_data %>%
filter(campaign_name == 'Campaign 1',
banner == '160 x 600') %>%
stacked_barplot('criteo_gross_profit',
'user_engagement',
'placement',
'User Engagement',
'Criteo Gross Profit',
'Criteo Gross Profit on 160 x 600, Campaign 3')
cleaned_data %>%
filter(campaign_name == 'Campaign 2',
placement == 'mno') %>%
stacked_barplot('post_click_sales_amount',
'user_engagement',
'banner',
'User Engagement',
'Post-click Sales',
'Spikes in BurritosOnline Post-click Sales on Campaign 2')
library(tidyverse)
getwd
getwd)()
getwd()
data <- read_csv('zoo outage.csv')
data %>%
mutate(datetime = strftime(paste0(pstday, ' ', hour), format = '%Y-%m-%d %H')) %>% View()
data %>%
mutate(datetime = strftime(paste0(pstday, ' ', hour), format = '%Y-%m-%d %h')) %>% View()
?strftime
data %>%
mutate(datetime = strftime(paste0(pstday, ' ', hour), format = '%Y-%m-%d %H')) %>% View()
data %>%
ggplot(hour, dfp_rev, group=pstday) +
geom_line()
data %>%
ggplot(aes(hour, dfp_rev, group=pstday)) +
geom_line()
library(forecast)
plot(data$dfp_rev, type = 'l')
fit <- arima(x=data$dfp_rev, order=c(3, 0, 0))
forecasts = predict(fit, n.ahead=12)
series = c(data$dfp_rev, forecasts$pred)
plot(series, type='l')
data %>%
ggplot(aes(hour, dfp_rev, group=pstday)) +
geom_line()
data %>%
mutate(datetime = strftime(paste0(pstday, ':', hour), format = '%Y-%m-%d:%H')) %>% View()
data %>%
mutate(datetime = strptime(paste0(pstday, ':', hour), format = '%Y-%m-%d:%H')) %>% View()
data %>%
mutate(datetime = as.POSIXct(paste0(pstday, ':', hour), format = '%Y-%m-%d:%H')) %>% View()
data %>%
mutate(datetime = as.POSIXct(paste0(pstday, ':', hour), format = '%Y-%m-%d:%H')) %>%
ggplot(aes(datetime, dfp_rev)) + geom_line()
library(tbats)
install.packages('tbats')
forecast(data$dfp_rev)
timeseries = ts(data$dfp_rev, freq=24/7)
bestfit <- list(aicc=Inf)
for(i in 1:25)
{
fit <- auto.arima(timeseries, xreg=fourier(timeseries, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
timeseries = ts(data$dfp_rev, freq=7/24)
bestfit <- list(aicc=Inf)
for(i in 1:25)
{
fit <- auto.arima(timeseries, xreg=fourier(timeseries, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
for(i in 1:7)
{
fit <- auto.arima(timeseries, xreg=fourier(timeseries, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
for(i in 1:3)
{
fit <- auto.arima(timeseries, xreg=fourier(timeseries, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
fit <- auto.arima(timeseries, xreg=fourier(timeseries, K=1), seasonal=FALSE)
fit <- auto.arima(timeseries, xreg=fourier(timeseries), seasonal=FALSE)
fit <- auto.arima(timeseries, seasonal=FALSE)
fc = forecast(fit)
plot(fc_)
plot(fc)
data %>%
mutate(datetime = as.POSIXct(paste0(pstday, ':', hour), format = '%Y-%m-%d:%H'),
metric = dfp_rev) %>%
ggplot(aes(datetime, metric, group=pstday)) +
geom_line()
print('hello world')
install.packages('RSQLite')
library(tidyverse)
map2(.x = c(0, -1, 1), #mean
.y = c(1, 1.5, 2), #sd,
.f = ~ rnorm,
n = 3)
walk2(paste0(".img_", unique(iris$Species), ".png"),
iris %>%
split(.$Species) %>%
map(~ggplot(., aes(Sepal.Length, Petal.Width)) +
geom_point()),
ggsave,
width=4, height=3)
getwd()
data(Nile)
ts.plot(Nile)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
library(IRKernel)
devtools::install_github('IRkernel/IRkernel')
install.packages('diget')
install.packages('digest')
install.packages("digest")
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(name = 'ir34', displayname = 'R 3.4')
install.packages('fpp2')
?library
lapply(libraries, library, character.only = TRUE)
libraries <- c('tidyverse', 'fpp2')
lapply(libraries, library, character.only = TRUE)
libraries <- c('tidyverse', 'fpp2')
lapply(libraries, library, character.only = TRUE)
?ggplot
y <- ts(c(123, 39, 78, 52, 110), start=2012)
y <- ts(c(example_vector), frequency=12)
example_vector <- c(10, 65, 56, 152, 123, 23)
y <- ts(c(example_vector), frequency=12)
example_frequencies <- list('yearly' = 1, 'quarterly' = 4, 'monthly' = 12, 'weekly' = 52)
?purrr::map
y_with_frequencies <-
purrr::map(example_frequencies, examplets)
ts(c(example_vector), frequency=frequency)
example_vector <- c(10, 65, 56, 152, 123, 23)
y <- ts(c(example_vector), frequency=12)
example_frequencies <- list('yearly' = 1, 'quarterly' = 4, 'monthly' = 12, 'weekly' = 52)
examplets <- function(frequency){
ts(c(example_vector), frequency=frequency)
}
y_with_frequencies <-
purrr::map(example_frequencies, examplets)
y_with_frequencies[[0]]
y_with_frequencies[[1]]
y_with_frequencies[[2]]
example_vector <- c(10, 65, 56, 152, 123, 23)
y <- ts(c(example_vector), frequency=12)
example_frequencies <- list('yearly' = 1, 'quarterly' = 4, 'monthly' = 12, 'weekly' = 52)
example_func <- function(frequency){
ts(c(example_vector), frequency=frequency)
}
example_with_frequencies <-
purrr::map(example_frequencies, example_func)
rm(y_with_frequencies)
rm(examplets)
autoplot(melsyd[, "Economy.Class"]) +
ggtitle("Economy Class Passengers, Melbourne to Sydney") +
labs(x = "Year",
y = "Thousands")
libraries <- c('tidyverse', 'fpp2')
lapply(libraries, library, character.only = TRUE)
autoplot(melsyd[, "Economy.Class"]) +
ggtitle("Economy Class Passengers, Melbourne to Sydney") +
labs(x = "Year",
y = "Thousands")
?autoplot
?melsyd
autoplot(a10) +
labs(x = "Year",
y = "$ million",
title = "Antidiabetic Drug Sales")
?a10
ggseasonplot(a10, year.labels = TRUE, year.labels.left = TRUE) +
labs(y = "$ millions",
title = "Seasonal plot: antidiabetic drug sales")
?ggseasonplot
ggseasonplot(a10, polar=TRUE) +
labs(y = "$ millions",
title = "Seasonal plot: antidiabetic drug sales")
?ggsubseriesplot
ggsubseriesplot(a10) +
labs(y = "$ millions",
title = "Seasonal subseries plot, antidiabetic drug sales")
qplot(Temperature, Demand, data=as.data.frame(elecdemand)) +
labs(x = "Temperature (Celsius)",
y = "Demand (GW)")
?qplot
# fpp2::visnights
autoplot(visnights[, 1:5], facets=TRUE) +
labs(y = "Number of visitor nights each quarter (millions)")
visnights[, 1:5] %>% as.data.frame() %>% GGally::ggpairs()
visnights[, 1:5] %>% as.data.frame() %>% plotmatrix()
install.packages("GGally")
libraries <- c('tidyverse', 'fpp2', 'GGally')
lapply(libraries, library, character.only = TRUE)
visnights[, 1:5] %>% as.data.frame() %>% plotmatrix()
visnights[, 1:5] %>% as.data.frame() %>% GGally::ggpairs()
#visnights[, 1:5] %>% as.data.frame() %>% GGally::ggpairs()
pairs(visnights[, 1:5])
visnights[, 1:5] %>% as.data.frame() %>% GGally::ggpairs()
beer2 <- window(fpp2::ausbeer, start=1992)
forecast::gglagplot(beer2)
?window
?stats::window
ggAcf(fpp2::beer2)
ggAcf(beer2)
forecast::ggAcf(beer2)
aelec <- window(elec, start=1980)
autoplot(aelec) +
labs(x = "Year",
y = "GWh")
ggAcf(aelec, lag = 48)
set.seed(30)
y <- ts(rnorm(50))
autoplot(y) + labs(title='White noise')
ggAcf(y)
corr(c(1, 2, 3), (4, 5, 6, 7))
corr(c(1, 2, 3), c(4, 5, 6, 7))
cor(c(1, 2, 3), c(4, 5, 6, 7))
forecast::meanf(y, 1)
# meanf takes the vector, and predicts h steps in the future
forecast::meanf(y, h = 3)
# naive is the naive method, forecasting h steps in the future
# rwf is the random walk forecast, for which naive is the optimal method if
# your data is a random walk
forecast::naive(y, h = 3)
forecast::rwf(y, h = 3)
forecast::snaive(y, h = 3)
forecast::rwf(y, h = 3, drift = )
forecast::rwf(y, h = 3, drift = TRUE)
beer2 <- window(fpp2::ausbeer, start=1992, end=c(2007, 4))
autoplot(beer2) +
autolayer(meanf(beer2, h = 11), series = "Mean", PI = FALSE) +
autolayer(naive(beer2, h = 11), series = "Naive", PI = FALSE) +
autolayer(snaive(beer2, h = 11), series = "Seasonal Naive", PI = FALSE) +
autolayer(rwf(beer2, h = 11, drift = TRUE), series = "Drift", PI = FALSE) +
labs(x = "Year",
y = "Megalitres",
title = "Forecasts for quarterly beer production") +
guides(color=guide_legend(title="Method"))
cbind(Monthly = milk, DailyAverage = milk/forecast::monthdays(milk)) %>%
autoplot(dframe, facet = TRUE) +
labs(x = "Years",
y = "Pounds",
title = "Milk production per cow")
cbind(Monthly = milk, DailyAverage = milk/forecast::monthdays(milk)) %>%
autoplot( facet = TRUE) +
labs(x = "Years",
y = "Pounds",
title = "Milk production per cow")
(lambda <- forecast::BoxCox.lambda(fpp2::elec))
(lambda <- forecast::BoxCox.lambda(elec))
?elec
(lambda <- forecast::BoxCox.lambda(fma::elec))
# fma is another package that the authors worked on
(lambda <- forecast::BoxCox.lambda(fma::elec))
autoplot(forecast::BoxCox(fma::elec, lambda))
fc <- rwf(eggs, drift = TRUE, lambda = 0, h = 50, level = 80)
fc2 <- rwf(eggs, drift = TRUE, lambda = 0, h = 50, level = 80, biasadj = TRUE)
autoplot(eggs) +
autolayer(fc, series = "Simple back-transformed forecast") +
autolayer(fc, series = "Bias-adjusted back-transformed forecast", PI = FALSE) +
guides(color = guide_legend(title = "Back-transformation method"))
fc <- rwf(eggs, drift = TRUE, lambda = 0, h = 50, level = 80)
fc2 <- rwf(eggs, drift = TRUE, lambda = 0, h = 50, level = 80, biasadj = TRUE)
autoplot(eggs) +
autolayer(fc, series = "Simple back-transformed forecast") +
autolayer(fc2, series = "Bias-adjusted back-transformed forecast", PI = FALSE) +
guides(color = guide_legend(title = "Back-transformation method"))
autoplot(fpp2::goog200) +
labs(x = "Day",
y = "Closing Price ($)",
title = "Google stock (Daily ending 6 December 2013)")
res <- residuals(naive(goog200))
autoplot(res) +
labs(x = "Day",
y = "",
title = "Residuals from naive model")
forecast::gghistogram(res) +
labs(title = "Histogram of naive model residuals")
ggAcf(res) +
labs("ACF of naive model residuals")
ggAcf(res) +
labs(title = "ACF of naive model residuals")
fc <- ses(oildata, h=5)
oildata <- window(oil, start = 1996)
fc <- ses(oildata, h=5)
fc
fc$method
accuracy(fc)
fc
fc$model
setwd('C:\Users\Eric\Downloads')
setwd("C:\Users\Eric\Downloads")
setwd("C:/Users/Eric/Downloads")
dir
dir()
setwd("C:\Users\Eric\Documents\GitHub\全国観光入込客統計のとりまとめ状況_平成26")
setwd("C:/Users/Eric/Documents/GitHub/全国観光入込客統計のとりまとめ状況_平成26")
setwd("C:/Users/Eric/Documents/GitHub/)
setwd("C:/Users/Eric/Documents/GitHub/")
dir
dir()
dir()
setwd('zennihonkankouirikomikyakutoukei_heisei26/')
dir()
library(tidyverse)
dir('./data')
library(readxl)
rawfile <- readxl::read_xls('./data/')
rawfile <- readxl::read_xls('./data/001212602.xls')
?read_xls
readxl::excel_sheets('./data/001212602.xls')
(sheets <- readxl::excel_sheets('./data/001212602.xls'))
datapath <- './data/001212602.xls'
rawfile <- readxl::read_xls(datapath)
(sheets <- readxl::excel_sheets(datapath) %>% cbind(datapath))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
set_names(c('sheet', 'path')))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
set_tidy_names(c('sheet', 'path')))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
setNames(c('sheet', 'path')))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
rename('sheet' = '.')))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
rename('sheet' = '.'))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
as.data.frame() %>%
rename('sheet' = '.'))
raws <-
sheets %>%
purrr::map2(.x = .$datapath, .y = .$sheet, .f = read_xls())
purrr::map2(.x = .$datapath, .y = .$sheet, .f = read_xls
)
raws <-
sheets %>%
purrr::map2(.x = datapath, .y = .sheet, .f = read_xls)
raws <-
sheets %>%
purrr::map2(.x = datapath, .y = sheet, .f = read_xls)
raws <-
sheets %>%
mutate(files = purrr::map2(.x = datapath, .y = sheet, .f = read_xls))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
as.data.frame() %>%
rename('sheet' = '.') %>%
mutate(sheet = as.character(sheet)))
raws <-
sheets %>%
mutate(files = purrr::map2(.x = datapath, .y = sheet, .f = read_xls))
rawfile <- readxl::read_xls(datapath, '1')
?read_xls
rawfile <- readxl::read_xls(datapath, '1', col_types = seq('text', 13))
rawfile <- readxl::read_xls(datapath, '1', col_types = 'text')
View(rawfile)
Sys.getlocale()
Sys.setlocale("LC_CTYPE", "English_United States.1258")
rawfile <- readxl::read_xls(datapath, '1', col_types = 'text')
encoding(rawfile$X__1)
Encoding(rawfile$X__1)
iconv(rawfile$X__1)
iconv(rawfile$X__1, to='utf-8')
iconv(rawfile$X__1, from='ascii', to='utf-8')
iconv(rawfile$X__1, from='utf-8', to='ascii')
test <- '01 北海道'
View(rawfile)
rawfile[1]
rawfile[1][1]
rawfile[1][[1]]
rawfile[2][[1]]
rawfile <- readxl::read_xls(datapath, '1', col_types = 'text')
?Startup
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile") )
Filter(file.exists, candidates)
install.packages('readxl')
install.packages("readxl")
?readxl
library(readxl)
library(readxl)
install.packages('readxl')
library(readxl)
library(tidyverse)
datapath <- './data/001212602.xls'
rawfile <- readxl::read_xls(datapath, '1', col_types = 'text')
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
as.data.frame() %>%
rename('sheet' = '.') %>%
mutate(sheet = as.character(sheet)))
as.tibble(sheets)
Sys.setlocale("LC_ALL", "English_United States.932")
as.tibble(sheets)
View(rawfile)
raws <-
sheets %>%
mutate(files = purrr::map2(.x = datapath, .y = sheet, .f = read_xls))
library(tidyverse)
library(readxl)
datapath <- './data/001212602.xls'
rawfile <- readxl::read_xls(datapath, '1', col_types = 'text')
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
as.data.frame() %>%
rename('sheet' = '.') %>%
mutate(sheet = as.character(sheet)))
raws <-
sheets %>%
mutate(files = purrr::map2(.x = datapath, .y = sheet, .f = read_xls))
(sheets <-
readxl::excel_sheets(datapath) %>%
cbind(datapath) %>%
as.data.frame() %>%
rename('sheet' = '.') %>%
mutate_if(.predicate = is.factor, .funs = as.character))
raws <-
sheets %>%
mutate(files = purrr::map2(.x = datapath, .y = sheet, .f = read_xls))
raws[1] %>% View()
raws[2] %>% View()
raws[3] %>% View()
raws[4] %>% View()
raws[1][1] %>% View()
raws[1][[1]] %>% View()
raws[3][[1]] %>% View()
raws[3][[1]][[1]] %>% View()
raws[3][[2]] %>% View()
raws[3][[1]][[2]] %>% View()
raws[1[1]]
raws[1]
raws[1][2]
raws[1][1]
rows[2]
raws[2][1]
raws[2][2]
